"use strict";(self.webpackChunkdocs_surrealdb_com=self.webpackChunkdocs_surrealdb_com||[]).push([[5907],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=s,m=d["".concat(o,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:s,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5104:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_position:2},i=void 0,l={unversionedId:"Security/authentication",id:"Security/authentication",title:"authentication",description:"Authentication",source:"@site/docs/Security/authentication.mdx",sourceDirName:"Security",slug:"/Security/authentication",permalink:"/docs/Security/authentication",draft:!1,editUrl:"https://github.com/surrealdb/docs.surrealdb.com/edit/main/docs/Security/authentication.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"overview",permalink:"/docs/Security/overview"},next:{title:"capabilities",permalink:"/docs/Security/capabilities"}},o={},u=[{value:"Authentication",id:"authentication",level:2},{value:"System users",id:"system-users",level:2},{value:"Example: Define a Root-level user",id:"example-define-a-root-level-user",level:3},{value:"Sign in using the new user",id:"sign-in-using-the-new-user",level:3},{value:"JavaScript SDK",id:"javascript-sdk",level:4},{value:"HTTP Request",id:"http-request",level:4},{value:"Example: Define a Database-level user",id:"example-define-a-database-level-user",level:3},{value:"Sign in using the new user",id:"sign-in-using-the-new-user-1",level:3},{value:"JavaScript SDK",id:"javascript-sdk-1",level:4},{value:"HTTP Request",id:"http-request-1",level:4},{value:"Scope users",id:"scope-users",level:2},{value:"Example: Setup scope authentication",id:"example-setup-scope-authentication",level:3},{value:"Define the User table and fields",id:"define-the-user-table-and-fields",level:4},{value:"Define the User scope",id:"define-the-user-scope",level:5},{value:"Sign up to the scope",id:"sign-up-to-the-scope",level:3},{value:"JavaScript SDK",id:"javascript-sdk-2",level:4},{value:"HTTP Request",id:"http-request-2",level:4},{value:"Sign in to the scope",id:"sign-in-to-the-scope",level:3},{value:"JavaScript SDK",id:"javascript-sdk-3",level:4},{value:"HTTP Request",id:"http-request-3",level:4}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"authentication"},"Authentication"),(0,s.kt)("p",null,"There are multiple forms of authentication built into SurrealDB, supporting different use cases:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/Security/authentication#system-users"},"System users"),": Created by the SurrealDB administrator and used for managing and consuming the database"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/Security/authentication#scope-users"},"Scope users"),": Used for consuming the database, and they allow custom signup, signin and permissions logic")),(0,s.kt)("h2",{id:"system-users"},"System users"),(0,s.kt)("p",null,"System users is the term we use to describe users defined directly on SurrealDB by the administrator. Same concept as any other database."),(0,s.kt)("p",null,"Users may belong to different levels (root, namespace or database) and have different roles assigned to limit what they can do to the system. Users are defined with the ",(0,s.kt)("a",{parentName:"p",href:"/docs/surrealql/statements/define/user"},"DEFINE USER")," statement."),(0,s.kt)("p",null,"SurrealDB implements RBAC (Role Based Access Control) to define what a user can do. Each user is assigned one or more roles (currently limited to the built-in ",(0,s.kt)("inlineCode",{parentName:"p"},"OWNER"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"EDITOR")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"VIEWER")," roles)."),(0,s.kt)("p",null,"Go to ",(0,s.kt)("a",{parentName:"p",href:"/docs/surrealql/statements/define/user"},"DEFINE USER")," for more information."),(0,s.kt)("h3",{id:"example-define-a-root-level-user"},"Example: Define a Root-level user"),(0,s.kt)("p",null,"Root-level users have visibility into all namespaces and databases, which means that their permissions apply to all of those levels."),(0,s.kt)("p",null,"In this example we will create a root-level user ",(0,s.kt)("inlineCode",{parentName:"p"},"john")," with a password and the ",(0,s.kt)("inlineCode",{parentName:"p"},"OWNER")," role:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'DEFINE USER john ON ROOT PASSWORD "VerySecurePassword!" ROLES OWNER;\n')),(0,s.kt)("h3",{id:"sign-in-using-the-new-user"},"Sign in using the new user"),(0,s.kt)("p",null,"Examples using the JavaScript SDK or a raw HTTP request."),(0,s.kt)("h4",{id:"javascript-sdk"},"JavaScript SDK"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n    ns: 'test',\n    db: 'test',\n});\n\ndb.signin({\n    user: 'john',\n    pass: 'VerySecurePassword!',\n});\n")),(0,s.kt)("h4",{id:"http-request"},"HTTP Request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n    -H "Accept: application/json" \\\n    -d \'{"user":"john", "pass":"VerySecurePassword!"}\' \\\n    http://localhost:8000/signin\n')),(0,s.kt)("h3",{id:"example-define-a-database-level-user"},"Example: Define a Database-level user"),(0,s.kt)("p",null,"Database-level users have visibility into all resources that belong to the database where the user is defined."),(0,s.kt)("p",null,"In this example we will create a database-level user ",(0,s.kt)("inlineCode",{parentName:"p"},"mary")," with a password and the ",(0,s.kt)("inlineCode",{parentName:"p"},"EDITOR")," role:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},'DEFINE USER mary ON DATABASE PASSWORD "VerySecurePassword!" ROLES EDITOR;\n')),(0,s.kt)("h3",{id:"sign-in-using-the-new-user-1"},"Sign in using the new user"),(0,s.kt)("p",null,"Examples using the JavaScript SDK or a raw HTTP request."),(0,s.kt)("p",null,"Notice how we need to pass along ",(0,s.kt)("inlineCode",{parentName:"p"},"NS")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"DB")," properties here, to let SurrealDB know where the user is defined."),(0,s.kt)("h4",{id:"javascript-sdk-1"},"JavaScript SDK"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n    ns: 'test',\n    db: 'test',\n});\n\ndb.signin({\n    // Because we are signin in a database user, we need to let SurrealDB know on which database this user is located.\n    NS: 'test',\n    DB: 'test',\n\n    user: 'mary',\n    pass: 'VerySecurePassword!',\n});\n")),(0,s.kt)("h4",{id:"http-request-1"},"HTTP Request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n    -H "Accept: application/json" \\\n    -d \'{"NS":"test", "DB":"test", "user":"mary", "pass":"VerySecurePassword!"}\' \\\n    http://localhost:8000/signin\n')),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"scope-users"},"Scope users"),(0,s.kt)("p",null,"Scope is the term we use to describe the mechanism SurrealDB offers to define your own signin and signup logic. This feature contributes to making SurrealDB an all-in-one BaaS (Backend-as-a-Service)."),(0,s.kt)("p",null,"Scopes are defined with the ",(0,s.kt)("a",{parentName:"p",href:"/docs/surrealql/statements/define/scope"},"DEFINE SCOPE")," statement. A scope is configured with the following config:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"SIGNUP"),": Defines the logic for when a user signs up to the scope. It usually creates a new entry to a table"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"SIGNIN"),": Defines the logic for when a user signs in to the scope. It usually check the provided credentials against the data in a table"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"SESSION"),": Defines the session duration")),(0,s.kt)("p",null,"By default, scopes have no permissions. They don't use the RBAC system and can only view data if allowed by a ",(0,s.kt)("inlineCode",{parentName:"p"},"PERMISSIONS")," clause, which is defined on every data resource (i.e. tables)"),(0,s.kt)("p",null,"Go to ",(0,s.kt)("a",{parentName:"p",href:"/docs/surrealql/statements/define/scope"},"DEFINE SCOPE")," for more information."),(0,s.kt)("h3",{id:"example-setup-scope-authentication"},"Example: Setup scope authentication"),(0,s.kt)("p",null,"We will go over one of the many ways you can set up scope authentication. Given you can define your own logic, there is not a single way to do it. Feel free to modify where needed!"),(0,s.kt)("h4",{id:"define-the-user-table-and-fields"},"Define the User table and fields"),(0,s.kt)("p",null,"Typically, you would define a user table where new records are created every time a user signs up."),(0,s.kt)("p",null,"In the following code snippet we will define the ",(0,s.kt)("inlineCode",{parentName:"p"},"user")," table and a few ",(0,s.kt)("inlineCode",{parentName:"p"},"fields")," that enforce the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"An authenticated user can select, update and delete its own user record."),(0,s.kt)("li",{parentName:"ul"},"Asserts that the email provided by the user is actually an email address."),(0,s.kt)("li",{parentName:"ul"},"Forbid users to use an email that is already in use by another user. We do this by creating a unique index for the email field.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Define tables and fields"',title:'"Define',tables:!0,and:!0,'fields"':!0},"DEFINE TABLE user SCHEMAFULL\n    PERMISSIONS\n        FOR select, update, delete WHERE id = $auth.id;\n\nDEFINE FIELD name ON user TYPE string;\nDEFINE FIELD email ON user TYPE string ASSERT string::is::email($value);\nDEFINE FIELD password ON user TYPE string;\n\nDEFINE INDEX email ON user FIELDS email UNIQUE;\n")),(0,s.kt)("h5",{id:"define-the-user-scope"},"Define the User scope"),(0,s.kt)("p",null,"Define the ",(0,s.kt)("inlineCode",{parentName:"p"},"user")," scope: allow users to signin and signup by using the table and fields defined in the previous step"),(0,s.kt)("p",null,"The scope is configured like this:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Session tokens expire in 1 day. When a user signs up or signs in, a new session token is created."),(0,s.kt)("li",{parentName:"ul"},"The sign in logic needs the ",(0,s.kt)("inlineCode",{parentName:"li"},"email")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"password")," parameters to be provided by the user. In the scope logic, we use them as ",(0,s.kt)("inlineCode",{parentName:"li"},"$email")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"$password")),(0,s.kt)("li",{parentName:"ul"},"The sign up logic needs the ",(0,s.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"email")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"password")," parameters to be provided by the user. In the scope logic, we can use them as ",(0,s.kt)("inlineCode",{parentName:"li"},"$name"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"$email")," and ",(0,s.kt)("inlineCode",{parentName:"li"},"$password"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Scope definition"',title:'"Scope','definition"':!0},"DEFINE SCOPE user SESSION 1d\n    SIGNIN (\n        SELECT * FROM user WHERE email = $email AND crypto::argon2::compare(password, $password)\n    )\n    SIGNUP (\n        CREATE user CONTENT {\n            name: $name,\n            email: $email,\n            password: crypto::argon2::generate($password)\n        }\n    );\n")),(0,s.kt)("h3",{id:"sign-up-to-the-scope"},"Sign up to the scope"),(0,s.kt)("p",null,"Now that the scope is defined, we can start using it."),(0,s.kt)("p",null,"Examples using the JavaScript SDK or a raw HTTP request."),(0,s.kt)("h4",{id:"javascript-sdk-2"},"JavaScript SDK"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n    ns: 'test',\n    db: 'test',\n});\n\ndb.signup({\n    NS: 'test',\n    DB: 'test',\n\n    // Provide the name of the scope\n    SC: 'user',\n\n    // Provide the variables used by the signup query\n    name: 'John Doe',\n    email: 'john@doe.org',\n    password: 'VerySecurePassword!',\n});\n")),(0,s.kt)("h4",{id:"http-request-2"},"HTTP Request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n    -H "Accept: application/json" \\\n    -d \'{"NS":"test", "DB":"test", "SC":"user", "name":"John Doe", "email":"john@doe.org", "password":"VerySecurePassword!"}\' \\\n    http://localhost:8000/signup\n')),(0,s.kt)("h3",{id:"sign-in-to-the-scope"},"Sign in to the scope"),(0,s.kt)("p",null,"Once a user has signed up, it can now sign in when needed."),(0,s.kt)("p",null,"Examples using the JavaScript SDK or a raw HTTP request."),(0,s.kt)("h4",{id:"javascript-sdk-3"},"JavaScript SDK"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const db = new Surreal();\ndb.connect('ws://localhost:8000/rpc', {\n    ns: 'test',\n    db: 'test',\n});\n\ndb.signin({\n    NS: 'test',\n    DB: 'test',\n\n    // Provide the name of the scope\n    SC: 'user',\n\n    // Provide the variables used by the signin query\n    email: 'john@doe.org',\n    password: 'VerySecurePassword!',\n});\n")),(0,s.kt)("h4",{id:"http-request-3"},"HTTP Request"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \\\n    -H "Accept: application/json" \\\n    -d \'{"NS":"test", "DB":"test", "SC":"user", "email":"john@doe.org", "password":"VerySecurePassword!"}\' \\\n    http://localhost:8000/signin\n')))}c.isMDXComponent=!0}}]);