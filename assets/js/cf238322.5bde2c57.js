"use strict";(self.webpackChunkdocs_surrealdb_com=self.webpackChunkdocs_surrealdb_com||[]).push([[8196],{7320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>f,default:()=>j,frontMatter:()=>m,metadata:()=>y,toc:()=>k});var a=t(7462),s=t(7294),i=t(3905),o=t(508),r=t(5893);const c=o.ZP.p`
  font-style: normal;
  color: white;
`,d=o.ZP.p`
  color: white;
`,l=o.ZP.span`
  color: #66d9ef;
  margin-right: 10px;
`,u=o.ZP.span`
  color: white;
`,p=o.ZP.span`
  color: #e6db74;
`;const h=function(e){let{data:n}=e;const[t,a]=(0,s.useState)("#");return(0,r.jsx)("div",{children:(0,r.jsxs)("div",{className:"table",children:[(0,r.jsxs)("div",{className:"table-header",children:[(0,r.jsx)("div",{className:"table-cell",children:"Function"}),(0,r.jsx)("div",{className:"table-cell",children:"Description"})]}),(0,r.jsx)("a",{href:t,children:(0,r.jsx)("div",{className:"table-body",children:n.map(((e,n)=>{const t=e.functionKey.split(" ");return(0,r.jsxs)("div",{className:"table-row",onMouseEnter:()=>a((e=>{const n=e.split(" ").find((e=>e.includes(".")&&e.includes("(")));return n&&`#${n.split(".")[1].split("(")[0]}`})(e.functionKey)),children:[(0,r.jsx)("div",{className:"table-cell",children:(0,r.jsx)(c,{children:t.map(((e,n)=>{if(0===n)return(0,r.jsx)(l,{children:e},n);if(e.includes(".")&&e.includes("(")){const[t,a]=e.split("."),[s,i]=a.split("(");return(0,r.jsxs)("span",{children:[t,".",(0,r.jsx)(p,{children:s}),"(",i]},n)}return(0,r.jsx)(u,{children:e},n)})).reduce(((e,n)=>[e," ",n]))})}),(0,r.jsx)("div",{className:"table-cell",children:(0,r.jsx)(d,{children:e.description})})]},n)}))})})]})})},b=[{functionKey:"async db.connect(url, options)",description:"Connects to a local or remote database endpoint"},{functionKey:"async db.wait()",description:"Waits for the connection to the database to succeed"},{functionKey:"async db.close()",description:"Closes the persistent connection to the database"},{functionKey:"async db.use({ ns, db })",description:"Switch to a specific namespace and database"},{functionKey:"async db.info<T>()",description:"Returns the record of an authenticated scope user"},{functionKey:"async db.signup(vars)",description:"Signs this connection up to a specific authentication scope"},{functionKey:"async db.signin(vars)",description:"Signs this connection in to a specific authentication scope"},{functionKey:"async db.invalidate()",description:"Invalidates the authentication for the current connection"},{functionKey:"async db.authenticate(token)",description:"Authenticates the current connection with a JWT token"},{functionKey:"async db.let(key, val)",description:"Assigns a value as a parameter for this connection"},{functionKey:"async db.unset(key)",description:"Removes a parameter for this connection"},{functionKey:"async db.live<T>(table, callback, diff)",description:"Initiate a live query"},{functionKey:"async db.listenLive<T>(queryUuid, callback)",description:"Register a callback for a running live query"},{functionKey:"async db.kill(queryUuid)",description:"Kill a running live query"},{functionKey:"async db.query<T>(sql, vars)",description:"Runs a set of SurrealQL statements against the database"},{functionKey:"async db.select<T>(thing)",description:"Selects all records in a table, or a specific record"},{functionKey:"async db.create<T, U>(thing, data)",description:"Creates a record in the database"},{functionKey:"async db.insert<T, U>(thing, data)",description:"Inserts one or multiple records in the database"},{functionKey:"async db.update<T, U>(thing, data)",description:"Updates all records in a table, or a specific record"},{functionKey:"async db.merge<T, U>(thing, data)",description:"Modifies all records in a table, or a specific record"},{functionKey:"async db.patch(thing, data)",description:"Applies JSON Patch changes to all records in a table, or a specific record"},{functionKey:"async db.delete<T>(thing)",description:"Deletes all records, or a specific record"}],m={sidebar_position:3,slug:"/Integration/sdks/nodejs"},f="Node.js",y={unversionedId:"Integration/SDKs/Nodejs",id:"Integration/SDKs/Nodejs",title:"Node.js",description:"Node.js SDK for SurrealDB",source:"@site/docs/Integration/SDKs/Nodejs.mdx",sourceDirName:"Integration/SDKs",slug:"/Integration/sdks/nodejs",permalink:"/docs/Integration/sdks/nodejs",draft:!1,editUrl:"https://github.com/surrealdb/docs.surrealdb.com/edit/main/docs/Integration/SDKs/Nodejs.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/Integration/sdks/nodejs"},sidebar:"tutorialSidebar",previous:{title:"Rust",permalink:"/docs/Integration/sdks/rust"},next:{title:"CLI tool",permalink:"/docs/category/cli-tool"}},g={},k=[{value:"Node.js SDK for SurrealDB",id:"nodejs-sdk-for-surrealdb",level:2},{value:"Install the SDK",id:"install-the-sdk",level:3},{value:"Connect to SurrealDB",id:"connect-to-surrealdb",level:3},{value:"SDK methods",id:"sdk-methods",level:3}],S={toc:k},K="wrapper";function j(e){let{components:n,...t}=e;return(0,i.kt)(K,(0,a.Z)({},S,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"nodejs"},"Node.js"),(0,i.kt)("h2",{id:"nodejs-sdk-for-surrealdb"},"Node.js SDK for SurrealDB"),(0,i.kt)("p",null,"The SurrealDB SDK for Node.js enables simple and advanced querying of a remote database from server-side code. All connections to SurrealDB are made over WebSockets, and automatically reconnect when the connection is terminated."),(0,i.kt)("p",null,"To contribute to this documentation, edit this file on GitHub."),(0,i.kt)("p",null,"To contribute to the SDK code, submit an Issue or Pull Request here."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("em",null,"NOTE:")," This SDK is compatible with V1.0.0"),(0,i.kt)("h3",{id:"install-the-sdk"},"Install the SDK"),(0,i.kt)("p",null,"First, install the SurrealDB SDK using npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save surrealdb.js\n")),(0,i.kt)("p",null,"Alternatively, you can use install the SurrealDB SDK using yarn, pnpm or similar:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add surrealdb.js\npnpm install surrealdb.js\n")),(0,i.kt)("h3",{id:"connect-to-surrealdb"},"Connect to SurrealDB"),(0,i.kt)("p",null,"Create a new app.js file and add the following code to try out some basic operations using the SurrealDB SDK."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { default: Surreal } = require('surrealdb.js');\n\nconst db = new Surreal();\n\nasync function main() {\n\n    try {\n        // Connect to the database\n        await db.connect('http://127.0.0.1:8000/rpc');\n\n        // Signin as a namespace, database, or root user\n        await db.signin({\n            user: 'root',\n            pass: 'root',\n        });\n\n        // Select a specific namespace / database\n        await db.use({ns: 'test', db: 'test'});\n\n        // Create a new person with a random id\n        let created = await db.create(\"person\", {\n            title: 'Founder & CEO',\n            name: {\n                first: 'Tobie',\n                last: 'Morgan Hitchcock',\n            },\n            marketing: true,\n            identifier: Math.random().toString(36).slice(2, 12),\n        });\n\n        // Update a person record with a specific id\n        let updated = await db.merge(\"person:jaime\", {\n            marketing: true,\n        });\n\n        // Select all people records\n        let people = await db.select(\"person\");\n\n        // Perform a custom advanced query\n        let groups = await db.query('SELECT marketing, count() FROM type::table($tb) GROUP BY marketing', {\n            tb: 'person',\n        });\n\n    } catch (e) {\n\n        console.error('ERROR', e);\n\n    }\n\n}\n\nmain();\n")),(0,i.kt)("p",null,"Then run your app from the command line with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node app.js\n")),(0,i.kt)("h3",{id:"sdk-methods"},"SDK methods"),(0,i.kt)("p",null,"The JavaScript SDK comes with a number of built-in functions."),(0,i.kt)(h,{data:b,mdxType:"TableComponent"}))}j.isMDXComponent=!0}}]);