"use strict";(self.webpackChunkdocs_surrealdb_com=self.webpackChunkdocs_surrealdb_com||[]).push([[3353],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(h,r(r({ref:t},u),{},{components:n})):o.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2549:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),l=(n(7294),n(3905));const a={sidebar_position:2},r=void 0,i={unversionedId:"Deployment/Deploy on Flyio",id:"Deployment/Deploy on Flyio",title:"Deploy on Flyio",description:"Deploy on Fly.io",source:"@site/docs/Deployment/Deploy on Flyio.mdx",sourceDirName:"Deployment",slug:"/Deployment/Deploy on Flyio",permalink:"/docs/Deployment/Deploy on Flyio",draft:!1,editUrl:"https://github.com/surrealdb/docs.surrealdb.com/edit/main/docs/Deployment/Deploy on Flyio.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"overview",permalink:"/docs/Deployment/overview"},next:{title:"Deploy on Kubernetes",permalink:"/docs/Deployment/Deploy on Kubernetes"}},s={},p=[{value:"Deploy on Fly.io",id:"deploy-on-flyio",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Get started",id:"get-started",level:2},{value:"Generate fly.toml",id:"generate-flytoml",level:2},{value:"Create volume for persistent storage",id:"create-volume-for-persistent-storage",level:2},{value:"Configure root authentication details",id:"configure-root-authentication-details",level:2},{value:"Deploy the instance",id:"deploy-the-instance",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"deploy-on-flyio"},"Deploy on Fly.io"),(0,l.kt)("p",null,"This document is based on a guide by one of our community members. You can find it here."),(0,l.kt)("h2",{id:"requirements"},"Requirements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://fly.io/docs/hands-on/install-flyctl"},"Make sure that you have ",(0,l.kt)("inlineCode",{parentName:"a"},"flyctl")," installed"),"."),(0,l.kt)("li",{parentName:"ul"},"Use either ",(0,l.kt)("a",{parentName:"li",href:"https://fly.io/docs/hands-on/sign-up"},"flyctl auth signup")," or ",(0,l.kt)("a",{parentName:"li",href:"https://fly.io/docs/hands-on/sign-in"},"flyctl auth login")," to authenticate your client.")),(0,l.kt)("h2",{id:"get-started"},"Get started"),(0,l.kt)("p",null,"We will create a working directory for our deployment. In it, we will store a Dockerfile and a fly.toml config file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir surrealdb-deployment && cd surrealdb-deployment\n## Uncomment the below line for macOS or Linux\n# nano Dockerfile\n## Uncomment the below line for Windows\n# notepad Dockerfile\n")),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"Dockerfile")," we specify which base image we want to use, and to which address/port we will bind the instance. You can edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"Dockerfile")," file and paste the following snippet into the file without any indents or spaces. The rest of the SurrealDB configuration will be done later with secrets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Docker file"',title:'"Docker','file"':!0},'FROM surrealdb/surrealdb:latest\nEXPOSE 8080\nCMD ["start", "--bind", "0.0.0.0:8080", "file://data/srdb.db"]\n')),(0,l.kt)("h2",{id:"generate-flytoml"},"Generate fly.toml"),(0,l.kt)("p",null,"We will generate most of the content for the ",(0,l.kt)("inlineCode",{parentName:"p"},"fly.toml")," configuration file using the ",(0,l.kt)("inlineCode",{parentName:"p"},"fly launch")," utility. Please answer the questions with the guidelines given below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Generate Boilerplate fly.toml file"',title:'"Generate',Boilerplate:!0,"fly.toml":!0,'file"':!0},"fly launch\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Choose an app name"),": Choose what you like. It will end up as name.fly.dev, so it must be a unique name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Choose a region"),": Choose what you like, usually a region close to your users."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Setup postgres database?"),": No, we will persist storage through a volume."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Setup upstash redis database?"),": No, we will persist storage through a volume."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Would you like to deploy now?"),": No, we need to finalize our configuration first.")),(0,l.kt)("h2",{id:"create-volume-for-persistent-storage"},"Create volume for persistent storage"),(0,l.kt)("p",null,"For this demo, we'll create a single volume with a size of 1 GB. Make sure to set it to the same region that you chose earlier! In this case data is the name of the volume."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Create the volume"',title:'"Create',the:!0,'volume"':!0},"fly volumes create data --region <region> --size 1\n")),(0,l.kt)("p",null,"To assign this volume to the instance that we'll deploy, we have to edit the ",(0,l.kt)("inlineCode",{parentName:"p"},"fly.toml")," file. Paste the following snippet down the bottom of the file without any indents or spaces. If you changed the name of the volume in the previous step, please also adjust the ",(0,l.kt)("inlineCode",{parentName:"p"},"source")," property here."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Assign the volume to instance"',title:'"Assign',the:!0,volume:!0,to:!0,'instance"':!0},'[mounts]\nsource="data"\ndestination="/data"\n')),(0,l.kt)("h2",{id:"configure-root-authentication-details"},"Configure root authentication details"),(0,l.kt)("p",null,"We will store the username and password for the root user in secrets. Feel free to pass on any other options here. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"surreal start -h")," to see which environment variables can be passed to surreal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Configure username & password"',title:'"Configure',username:!0,"&":!0,'password"':!0},'fly secrets set SURREAL_USER="..."\nfly secrets set SURREAL_PASS="..."\n')),(0,l.kt)("h2",{id:"deploy-the-instance"},"Deploy the instance"),(0,l.kt)("p",null,"Everything has been configured now, and we can deploy our instance securely with a single command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Deploy the instance"',title:'"Deploy',the:!0,'instance"':!0},"fly deploy\n")),(0,l.kt)("p",null,"After this, your instance will be available via ",(0,l.kt)("inlineCode",{parentName:"p"},"https://name.fly.dev"),", followed by the respective path for methods like ",(0,l.kt)("inlineCode",{parentName:"p"},"HTTP REST")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Websocket"),"."))}d.isMDXComponent=!0}}]);