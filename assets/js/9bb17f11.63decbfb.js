"use strict";(self.webpackChunkdocs_surrealdb_com=self.webpackChunkdocs_surrealdb_com||[]).push([[3943],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,b=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(b,l(l({ref:t},p),{},{components:n})):a.createElement(b,l({ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:9},l=void 0,s={unversionedId:"Installation/Run a multi node server",id:"Installation/Run a multi node server",title:"Run a multi node server",description:"Run a multi-node, scalable cluster with TiKV",source:"@site/docs/Installation/Run a multi node server.mdx",sourceDirName:"Installation",slug:"/Installation/Run a multi node server",permalink:"/docs/Installation/Run a multi node server",draft:!1,editUrl:"https://github.com/surrealdb/docs.surrealdb.com/edit/main/docs/Installation/Run a multi node server.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Run a disk based server",permalink:"/docs/Installation/Run a disk based server"},next:{title:"Upgrading from v1.0.0-beta.9 to v1.0.0-beta.10",permalink:"/docs/Installation/Upgrading/Upgrading from v1.0.0-beta.9 to v1.0.0-beta.10"}},i={},u=[{value:"Run a multi-node, scalable cluster with TiKV",id:"run-a-multi-node-scalable-cluster-with-tikv",level:2}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"run-a-multi-node-scalable-cluster-with-tikv"},"Run a multi-node, scalable cluster with TiKV"),(0,r.kt)("p",null,"For highly-available and highly-scalable setups, SurrealDB can be run on top of a ",(0,r.kt)("a",{parentName:"p",href:"https://tikv.org/"},"TiKV")," cluster, with the ability to horizontally scale to 100+ terabytes of data. In this example, we will start a local TiKV cluster with a single node, for development and testing purposes only. To install TiKV on your development machine, run the following command. This will install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pingcap/tiup"},(0,r.kt)("inlineCode",{parentName:"a"},"tiup"))," command-line tool, which enables deploying and managing TiKV clusters of any size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sSf https://tiup-mirrors.pingcap.com/install.sh | sh\n")),(0,r.kt)("p",null,"Once installed we shall start up a simple single-node development cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tiup playground --tag surrealdb --mode tikv-slim --pd 1 --kv 1\n")),(0,r.kt)("p",null,"Once TiKV is up and running, we can start a SurrealDB server instance, specifying the TiKV cluster endpoint as the backing data store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"surreal start tikv://127.0.0.1:2379\n")),(0,r.kt)("p",null,"The default logging level for the database server is ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", resulting in any informational logs to be output to the standard output. To control the logging verbosity, specify the ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"--log"))," argument. The following command starts the database with ",(0,r.kt)("inlineCode",{parentName:"p"},"trace")," level logging, resulting in most logs being output to the terminal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"surreal start --log trace tikv://127.0.0.1:2379\n")),(0,r.kt)("p",null,"In order to keep SurrealDB secure, configure your initial root-level user by setting the ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"--user"))," and ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"--pass"))," command-line arguments. The following command starts the database with a top-level user named root with a password also set to ",(0,r.kt)("inlineCode",{parentName:"p"},"root"),". The root user will be persisted in storage, which means you don't have to include the command line arguments next time you start SurrealDB."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"surreal start --log trace --user root --pass root tikv://127.0.0.1:2379\n")),(0,r.kt)("p",null,"In order to change the default port that SurrealDB uses for web connections and from database clients you can use the ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"--bind"))," argument. The following command starts the database on port ",(0,r.kt)("inlineCode",{parentName:"p"},"8080"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"surreal start --log trace --user root --pass root --bind 0.0.0.0:8080 tikv://placement.driver.hostname.or.ip:2379\n")),(0,r.kt)("p",null,"After running the above command, you should see the SurrealDB server startup successfully."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"surreal start --user root --pass root --bind 0.0.0.0:8080 file:mydatabase.db\n2023-08-30T15:06:34.788739Z  INFO surreal::dbs: \u2705\ud83d\udd12 Authentication is enabled \ud83d\udd12\u2705\n2023-08-30T15:06:34.788821Z  INFO surrealdb::kvs::ds: Starting kvs store in file:mydatabase.db\n2023-08-30T15:06:34.788859Z  INFO surrealdb::kvs::ds: Started kvs store in file:mydatabase.db\n2023-08-30T15:06:34.789222Z  INFO surrealdb::kvs::ds: Initial credentials were provided and no existing root-level users were found: create the initial user 'root'.\n2023-08-30T15:06:35.205123Z  INFO surrealdb::node: Started node agent\n2023-08-30T15:06:35.205827Z  INFO surrealdb::net: Started web server on 0.0.0.0:8080\n")),(0,r.kt)("p",null,"For details on the different commands available, visit the ",(0,r.kt)("a",{parentName:"p",href:"/docs/CLI%20tool"},"CLI tool documentation"),"."))}c.isMDXComponent=!0}}]);